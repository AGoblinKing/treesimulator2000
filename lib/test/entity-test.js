// Generated by CoffeeScript 1.3.3
(function() {
  var Entity, World, assert, vows,
    _this = this;

  vows = require("vows");

  assert = require("assert");

  Entity = require("../server/classes/Entity");

  World = require("../server/classes/World");

  vows.describe("Entity").addBatch({
    "An Entity": {
      topic: new Entity(),
      "has default properties": function(entity) {
        return assert.equal(entity.x, 0);
      },
      "has change events": {
        topic: function(entity) {
          var _this = this;
          entity.once("change:x", function(value) {
            return _this.callback(null, value);
          });
          entity.x = 1;
        },
        "that fire when property is changed": function(value) {
          return assert.equal(value, 1);
        }
      },
      "has bindings": function(entity) {
        return assert.deepEqual(entity.location, [1, 0, 0]);
      },
      "has binding change events": {
        topic: function(entity) {
          var _this = this;
          entity.once("change:location", function(value) {
            return _this.callback(null, value);
          });
          entity.x = 5;
        },
        "that fire when a binding is changed": function(value) {
          return assert.deepEqual(value, [5, 0, 0]);
        }
      },
      "has children": function(entity) {
        return assert.isArray(entity.children);
      },
      "can add children": {
        topic: function(entity) {
          var child;
          child = new Entity();
          entity.add(child);
          return [entity, child];
        },
        "that are present": function(_arg) {
          var child, entity;
          entity = _arg[0], child = _arg[1];
          return assert.equal(entity.children[0], child);
        },
        "that can be removed": function(_arg) {
          var child, entity;
          entity = _arg[0], child = _arg[1];
          entity.remove(child);
          return assert.equal(entity.children.length, 0);
        }
      },
      "can simplify": {
        topic: new Entity({
          id: "foo",
          x: 1
        }),
        "with no children": function(entity) {
          return assert.deepEqual(entity.simplify(), {
            properties: {
              x: 1,
              y: 0,
              z: 0,
              id: "foo"
            },
            children: []
          });
        },
        "with children": function(entity) {
          var child;
          child = new Entity();
          entity.add(child);
          return assert.deepEqual(entity.simplify(), {
            properties: {
              x: 1,
              y: 0,
              z: 0,
              id: "foo"
            },
            children: [child.simplify()]
          });
        }
      },
      "has a map": function(entity) {
        return assert.isObject(entity.map);
      },
      "handles view changes": {
        topic: function() {
          var e1, e2, world,
            _this = this;
          world = new World();
          e1 = new Entity({
            x: 0,
            y: 0,
            z: 0
          }, world);
          e1.setView(1);
          e1.on("change:view", function(location, entity) {
            return _this.callback(null, location, entity, e1);
          });
          e2 = new Entity({
            x: 1,
            y: 0,
            z: 0,
            id: "foo"
          }, world);
        },
        "when an entity is added": function(error, location, entity) {
          assert.equal(entity.id, "foo");
          return assert.deepEqual(entity.location, location);
        },
        "its map is also updated": function(error, location, entity, e1) {
          return assert.equal(e1.map[location.join(":")].id, entity.id);
        }
      }
    }
  })["export"](module);

}).call(this);
