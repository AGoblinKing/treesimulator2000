// Generated by CoffeeScript 1.4.0
(function() {
  var Action, Entity, Goal, TestAction, VariableTime, World, assert, util, vows,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  vows = require("vows");

  assert = require("assert");

  util = require("util");

  Entity = require("../server/classes/entity");

  World = require("../server/classes/world");

  Goal = require("../server/classes/goal");

  Action = require("../server/actions").Action;

  VariableTime = require("../server/triggers").VariableTime;

  TestAction = (function(_super) {

    __extends(TestAction, _super);

    function TestAction() {
      return TestAction.__super__.constructor.apply(this, arguments);
    }

    TestAction.prototype["do"] = function() {
      return this.entity.emit("executed");
    };

    return TestAction;

  })(Action);

  vows.describe("Triggers").addBatch({
    "VariableTime": {
      topic: function() {
        var entity, goal,
          _this = this;
        goal = new Goal({
          name: "variably timed test"
        });
        goal.actions.push(new TestAction());
        goal.triggers.push(new VariableTime({
          min: 1,
          max: 1
        }));
        entity = new Entity();
        entity.on("executed", function() {
          return _this.callback(true);
        });
        entity.addGoal(goal);
      },
      "is triggered": function() {
        return assert.ok(true, "is trigged");
      }
    }
  })["export"](module);

}).call(this);
