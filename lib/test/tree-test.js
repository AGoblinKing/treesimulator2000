// Generated by CoffeeScript 1.3.3
(function() {
  var Land, Tree, World, assert, vows, world;

  vows = require("vows");

  assert = require("assert");

  Land = require("../server/classes/land");

  World = require("../server/classes/world");

  Tree = require("../server/classes/tree");

  world = new World();

  vows.describe("Tree").addBatch({
    "A Tree": {
      topic: new Tree({
        x: 0,
        y: 0,
        z: 1
      }, world),
      "has nutrients": function(tree) {
        assert.isNumber(tree.phosphorus);
        assert.isNumber(tree.potassium);
        return assert.isNumber(tree.nitrogen);
      },
      "can eat": {
        topic: function(tree) {
          var land,
            _this = this;
          clearTimeout(tree.eater);
          tree.once("change:view", function() {
            return tree.doEat();
          });
          tree.on("change:phosphorus", function() {
            return _this.callback(null, tree);
          });
          land = new Land({
            x: 0,
            y: 0,
            z: 0,
            phosphorus: 1
          }, world);
        },
        "has fed on phosphorus": function(error, tree) {
          return assert.equal(tree.phosphorus, 1);
        }
      },
      "can eat on timeout": {
        topic: function() {
          var land, tree,
            _this = this;
          tree = new Tree({
            x: 5,
            y: 5,
            z: 1,
            nitrogen: 0
          }, world);
          clearTimeout(tree.eater);
          tree.eatTimeRate = 1;
          tree.minEatTime = 1;
          tree.maxEatTime = 1;
          tree.once("change:view", function() {
            return tree.getEating();
          });
          tree.once("change:nitrogen", function(nitro) {
            clearTimeout(tree.eater);
            return _this.callback(null, tree);
          });
          land = new Land({
            x: 5,
            y: 5,
            z: 0,
            nitrogen: 1
          }, world);
        },
        "has fed on nitrogen": function(error, tree) {
          return assert.equal(tree.nitrogen, 1);
        }
      },
      "can eat from multiple sources": {
        topic: function() {
          var tree, x, y, _i, _j,
            _this = this;
          world = new World();
          tree = new Tree({
            x: 0,
            y: 0,
            z: 1,
            nitrogen: 0
          }, world);
          clearTimeout(tree.eater);
          tree.on("change:nitrogen", function(howMuch) {
            if (howMuch === 4) {
              return _this.callback(null, tree);
            }
          });
          for (x = _i = 0; _i <= 1; x = ++_i) {
            for (y = _j = 0; _j <= 1; y = ++_j) {
              new Land({
                x: x,
                y: y,
                z: 0,
                nitrogen: 1
              }, world);
            }
          }
          tree.doEat();
        },
        "has eaten 4 nitrogens": function(error, tree) {
          return assert.equal(tree.nitrogen, 4);
        }
      }
    }
  })["export"](module);

}).call(this);
