// Generated by CoffeeScript 1.3.3
(function() {
  var Actions, Entity, Goal, Triggers, assert, util, vows,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  vows = require("vows");

  assert = require("assert");

  util = require("util");

  Entity = require("../server/classes/Entity");

  Goal = require("../server/classes/Goal");

  Actions = require("../server/actions");

  Triggers = require("../server/triggers");

  vows.describe("Goal").addBatch({
    "An Empty Goal": {
      topic: new Goal(),
      "has no actions": function(goal) {
        return assert.deepEqual(goal.actions, []);
      },
      "has no conditionals": function(goal) {
        return assert.deepEqual(goal.conditionals, []);
      },
      "has no triggers": function(goal) {
        return assert.deepEqual(goal.triggers, []);
      },
      "has no reactions": function(goal) {
        return assert.deepEqual(goal.reactions, []);
      }
    },
    "A Filled Goal": {
      topic: new Goal({
        name: "bob",
        actions: [
          {
            type: "Action",
            name: "swat"
          }
        ],
        triggers: [
          {
            type: "Trigger",
            name: "zomg"
          }
        ],
        reactions: [
          {
            type: "Action",
            name: "react to swat"
          }
        ]
      }),
      "has reactions": function(goal) {
        return assert.equal(goal.reactions[0].name, "react to swat");
      },
      "has triggers": function(goal) {
        return assert.equal(goal.triggers[0].name, "zomg");
      },
      "has a name": function(goal) {
        return assert.equal(goal.name, "bob");
      },
      "has actions": function(goal) {
        return assert.equal(goal.actions[0].name, "swat");
      }
    },
    "A registered goal": {
      topic: function() {
        var TestAction, TestTrigger, entity, goal,
          _this = this;
        TestAction = (function(_super) {

          __extends(TestAction, _super);

          function TestAction() {
            return TestAction.__super__.constructor.apply(this, arguments);
          }

          TestAction.prototype.defaults = {
            rawr: "ohyeah?"
          };

          TestAction.prototype.reactions = {
            "RAWR": function(_arg) {
              var who;
              who = _arg.who;
              return who.emit("end", this.rawr);
            }
          };

          TestAction.prototype["do"] = function() {
            return this.entity.emit("RAWR", {
              who: this.entity
            });
          };

          return TestAction;

        })(Actions.Action);
        TestTrigger = (function(_super) {

          __extends(TestTrigger, _super);

          function TestTrigger() {
            return TestTrigger.__super__.constructor.apply(this, arguments);
          }

          TestTrigger.prototype.defaults = {
            event: "start"
          };

          TestTrigger.prototype.register = function(fn) {
            return this.entity.on(this.event, fn);
          };

          return TestTrigger;

        })(Triggers.Trigger);
        goal = new Goal({
          name: "bob"
        });
        goal.actions.push(new TestAction());
        goal.triggers.push(new TestTrigger());
        goal.reactions.push(new TestAction());
        entity = new Entity();
        entity.on("end", function(message) {
          return _this.callback(null, entity, message);
        });
        entity.addGoal(goal);
        entity.emit("start");
      },
      "recieves events and messages": function(err, entity, message) {
        assert.equal(message, "ohyeah?");
        return assert.equal(entity.goals[0].name, "bob");
      }
    }
  })["export"](module);

}).call(this);
