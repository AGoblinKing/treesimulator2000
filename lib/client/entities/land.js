// Generated by CoffeeScript 1.4.0
(function() {
  var Land, Voxel, blankMat, div, lands, mergedGeo, mesh, num, ratio, rough, roughQuad, size, trees, turns, wood, x, y;

  size = 1;

  div = 5;

  ratio = size / div;

  blankMat = new THREE.Material;

  Voxel = function() {
    return new THREE.Mesh(new THREE.CubeGeometry(ratio, ratio, ratio), blankMat);
  };

  lands = (function() {
    var _i, _j, _k, _results;
    _results = [];
    for (rough = _i = 0; _i <= 10; rough = ++_i) {
      mergedGeo = new THREE.Geometry();
      for (x = _j = 0; 0 <= div ? _j <= div : _j >= div; x = 0 <= div ? ++_j : --_j) {
        for (y = _k = 0; 0 <= div ? _k <= div : _k >= div; y = 0 <= div ? ++_k : --_k) {
          roughQuad = rough / 10;
          mesh = Voxel();
          mesh.position.x = x * ratio - size / 2;
          mesh.position.y = y * ratio - size / 2;
          mesh.position.z = Math.random() * roughQuad * ratio;
          THREE.GeometryUtils.merge(mergedGeo, mesh);
        }
      }
      _results.push(mergedGeo);
    }
    return _results;
  })();

  trees = (function() {
    var _i, _results;
    _results = [];
    for (num = _i = 0; _i <= 10; num = ++_i) {
      mergedGeo = new THREE.Geometry();
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (wood = _j = 0; 0 <= num ? _j <= num : _j >= num; wood = 0 <= num ? ++_j : --_j) {
          _results1.push(mesh);
        }
        return _results1;
      })());
    }
    return _results;
  })();

  turns = [Math.PI, 0, Math.PI / 2, 3 * Math.PI / 2];

  Land = (function() {

    function Land(entity, scene) {
      var mat, _ref;
      this.scene = scene;
      this.properties = entity.properties;
      mat = new THREE.MeshLambertMaterial({
        color: this.computeColor()
      });
      switch (this.properties.type) {
        case "tree":
          this.addObj(new THREE.Mesh(new THREE.CubeGeometry(size, size, size), mat));
          break;
        default:
          mesh = new THREE.Mesh(lands[(_ref = this.properties.roughness) != null ? _ref : 10], mat);
          mesh.rotation.setZ(turns[Math.floor(Math.random() * 4)]);
          this.addObj(mesh);
      }
    }

    Land.prototype.addObj = function(obj) {
      var props;
      this.obj = obj;
      obj.castShadow = false;
      obj.receiveShadow = true;
      props = this.properties;
      obj.position.x = props.x;
      obj.position.y = props.y;
      if (props.z > 0) {
        props.z -= .5;
      }
      obj.position.z = props.z + (Math.random() * .01);
      return this.scene.add(obj);
    };

    Land.prototype.update = function(_arg) {
      var properties, _ref;
      properties = _arg.properties;
      $.extend(this.properties, properties);
      if (properties.phosphorus || properties.nitrogen || properties.phosorphus) {
        return (_ref = this.obj) != null ? _ref.material.color = this.computeColor() : void 0;
      }
    };

    Land.prototype.kill = function() {
      this.scene.remove(this.obj);
      return this.obj.deallocate();
    };

    Land.prototype.computeColor = function() {
      var color, green;
      color = new THREE.Color(0x5E2605);
      green = this.properties.nitrogen / 100 * 1;
      green += this.properties.potassium / 100 * 1;
      green += this.properties.phosphorus / 100 * 1;
      color.g = green / 3;
      return color;
    };

    return Land;

  })();

  module.exports = Land;

}).call(this);
