// Generated by CoffeeScript 1.4.0
(function() {
  var Land, div, geos, mat, mergedGeo, mesh, ratio, size, x, y;

  size = 1;

  div = 5;

  ratio = size / div;

  geos = (function() {
    var _i, _j, _k, _results;
    _results = [];
    for (x = _i = 0; _i <= 5; x = ++_i) {
      mat = new THREE.Material;
      mergedGeo = new THREE.Geometry();
      for (x = _j = 0; 0 <= div ? _j <= div : _j >= div; x = 0 <= div ? ++_j : --_j) {
        for (y = _k = 0; 0 <= div ? _k <= div : _k >= div; y = 0 <= div ? ++_k : --_k) {
          mesh = new THREE.Mesh(new THREE.CubeGeometry(ratio, ratio, ratio), mat);
          mesh.position.x = x * ratio;
          mesh.position.y = y * ratio;
          mesh.position.z = (Math.random() * 2) * ratio;
          THREE.GeometryUtils.merge(mergedGeo, mesh);
        }
      }
      _results.push(mergedGeo);
    }
    return _results;
  })();

  Land = (function() {

    function Land(entity, scene) {
      var obj, props;
      this.scene = scene;
      this.properties = entity.properties;
      mat = new THREE.MeshLambertMaterial({
        color: this.computeColor()
      });
      this.obj = obj = (function() {
        switch (this.properties.type) {
          case "tree":
            return new THREE.Mesh(new THREE.CubeGeometry(size, size, size), mat);
          default:
            return new THREE.Mesh(geos[Math.floor(Math.random() * 5)], mat);
        }
      }).call(this);
      console.log(obj);
      props = entity.properties;
      obj.position.x = props.x;
      obj.position.y = props.y;
      if (props.z > 0) {
        props.z -= .5;
      }
      obj.position.z = props.z;
      /*
              outline = new THREE.MeshLambertMaterial
                  color: 0x000000
                  wireframe: true
              outlineMesh = new THREE.Mesh geom, outline
              outlineMesh.position.z += .001
              obj.add outlineMesh
      */

      this.scene.add(obj);
    }

    Land.prototype.update = function(_arg) {
      var properties;
      properties = _arg.properties;
      $.extend(this.properties, properties);
      if (properties.phosphorus || properties.nitrogen || properties.phosorphus) {
        return this.obj.material.color = this.computeColor();
      }
    };

    Land.prototype.kill = function() {
      this.scene.remove(this.obj);
      return this.obj.deallocate();
    };

    Land.prototype.computeColor = function() {
      var color, green;
      color = new THREE.Color(0x5E2605);
      green = this.properties.nitrogen / 100 * 1;
      green += this.properties.potassium / 100 * 1;
      green += this.properties.phosphorus / 100 * 1;
      color.g = green / 3;
      return color;
    };

    return Land;

  })();

  module.exports = Land;

}).call(this);
