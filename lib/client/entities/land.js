// Generated by CoffeeScript 1.4.0
(function() {

  define(["threejs"], function(THREE) {
    var Land, Voxel, blankMat, div, lands, makeTree, mergedGeo, mesh, ratio, rough, roughQuad, size, turns, x, y;
    size = 1;
    div = 5;
    ratio = size / div;
    blankMat = new THREE.Material;
    Voxel = function() {
      return new THREE.Mesh(new THREE.CubeGeometry(ratio, ratio, ratio), blankMat);
    };
    lands = (function() {
      var _i, _j, _k, _results;
      _results = [];
      for (rough = _i = 0; _i <= 10; rough = ++_i) {
        mergedGeo = new THREE.Geometry();
        for (x = _j = 0; 0 <= div ? _j <= div : _j >= div; x = 0 <= div ? ++_j : --_j) {
          for (y = _k = 0; 0 <= div ? _k <= div : _k >= div; y = 0 <= div ? ++_k : --_k) {
            roughQuad = rough / 10;
            mesh = Voxel();
            mesh.position.x = x * ratio - size / 2;
            mesh.position.y = y * ratio - size / 2;
            mesh.position.z = Math.random() * roughQuad * ratio;
            THREE.GeometryUtils.merge(mergedGeo, mesh);
          }
        }
        _results.push(mergedGeo);
      }
      return _results;
    })();
    makeTree = function(num) {
      var thickness, wood, _i, _ref;
      mergedGeo = new THREE.Geometry();
      thickness = Math.max(1, Math.floor(num / 10));
      for (wood = _i = 0, _ref = num - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; wood = 0 <= _ref ? ++_i : --_i) {
        mesh = Voxel();
        mesh.position.x = (wood % thickness) * ratio - ratio + (Math.random() * ratio - ratio / 2) / 4;
        mesh.position.y = (Math.floor(wood / thickness) % thickness) * ratio - ratio + (Math.random() * ratio - ratio / 2) / 4;
        mesh.position.z = Math.floor(wood / (thickness * thickness)) * ratio;
        THREE.GeometryUtils.merge(mergedGeo, mesh);
      }
      return mergedGeo;
    };
    turns = [Math.PI, 0, Math.PI / 2, 3 * Math.PI / 2];
    return Land = (function() {

      function Land(entity, scene) {
        this.scene = scene;
        this.properties = entity.properties;
        this.makeObj();
      }

      Land.prototype.makeObj = function() {
        var mat, _ref, _ref1;
        mat = new THREE.MeshLambertMaterial({
          color: this.computeColor()
        });
        switch (this.properties.type) {
          case "tree":
            return this.addObj(new THREE.Mesh(makeTree((_ref = this.properties.wood) != null ? _ref : 1), mat));
          default:
            mesh = new THREE.Mesh(lands[(_ref1 = this.properties.roughness) != null ? _ref1 : 10], mat);
            mesh.rotation.setZ(turns[Math.floor(Math.random() * 4)]);
            return this.addObj(mesh);
        }
      };

      Land.prototype.addObj = function(obj) {
        var props;
        this.obj = obj;
        props = this.properties;
        obj.position.x = props.x;
        obj.position.y = props.y;
        if (props.z > 0) {
          props.z -= .5;
        }
        obj.position.z = props.z + (Math.random() * .01);
        return this.scene.add(obj);
      };

      Land.prototype.removeObj = function() {
        return this.scene.remove(this.obj);
      };

      Land.prototype.update = function(_arg) {
        var properties, _ref;
        properties = _arg.properties;
        $.extend(this.properties, properties);
        if (properties.phosphorus || properties.nitrogen || properties.phosorphus) {
          if ((_ref = this.obj) != null) {
            _ref.material.color = this.computeColor();
          }
        }
        if (properties.wood != null) {
          this.removeObj();
          return this.makeObj();
        }
      };

      Land.prototype.kill = function() {
        this.scene.remove(this.obj);
        return this.obj.deallocate();
      };

      Land.prototype.computeColor = function() {
        var color, green;
        color = new THREE.Color(0x5E2605);
        green = this.properties.nitrogen / 100 * 1;
        green += this.properties.potassium / 100 * 1;
        green += this.properties.phosphorus / 100 * 1;
        color.g = green / 3;
        return color;
      };

      return Land;

    })();
  });

}).call(this);
