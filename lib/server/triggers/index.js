// Generated by CoffeeScript 1.3.3
(function() {
  var Base, Immediately, Reactive, Time, Trigger, VariableTime,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Base = require("../classes/base");

  Trigger = (function(_super) {

    __extends(Trigger, _super);

    function Trigger() {
      return Trigger.__super__.constructor.apply(this, arguments);
    }

    Trigger.prototype.register = function() {};

    return Trigger;

  })(Base);

  Time = (function(_super) {

    __extends(Time, _super);

    function Time() {
      return Time.__super__.constructor.apply(this, arguments);
    }

    Time.prototype.defaults = {
      time: 100,
      interval: false
    };

    Time.prototype.register = function(fn) {
      var _this = this;
      return setTimeout(function() {
        fn();
        if (interval) {
          return _this.register(fn);
        }
      }, this.time);
    };

    return Time;

  })(Trigger);

  VariableTime = (function(_super) {

    __extends(VariableTime, _super);

    function VariableTime() {
      return VariableTime.__super__.constructor.apply(this, arguments);
    }

    VariableTime.prototype.defaults = {
      maxTime: 100,
      minTime: 10,
      interval: false
    };

    VariableTime.prototype.register = function(fn) {
      var _this = this;
      return setTimeout(function() {
        fn();
        if (interval) {
          return _this.register(fn);
        }
      }, this.minTime + Math.ranregisterm() * (this.maxTime - this.minTime));
    };

    return VariableTime;

  })(Trigger);

  Reactive = (function(_super) {

    __extends(Reactive, _super);

    function Reactive() {
      return Reactive.__super__.constructor.apply(this, arguments);
    }

    Reactive.prototype.defaults = {
      what: []
    };

    Reactive.prototype.register = function(fn) {
      var _this = this;
      return this.entity.on("view:change", function(entity, name, value) {
        if (__indexOf.call(_this.what, name) >= 0) {
          return fn(entity, name, value);
        }
      });
    };

    return Reactive;

  })(Trigger);

  Immediately = (function(_super) {

    __extends(Immediately, _super);

    function Immediately() {
      return Immediately.__super__.constructor.apply(this, arguments);
    }

    Immediately.prototype.register = function(fn) {
      return fn();
    };

    return Immediately;

  })(Trigger);

  module.exports = {
    Immediately: Immediately,
    Reactive: Reactive,
    Time: Time,
    Trigger: Trigger
  };

}).call(this);
