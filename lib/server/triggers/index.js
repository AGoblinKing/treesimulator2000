// Generated by CoffeeScript 1.4.0
(function() {
  var Base, Change, Immediately, Reactive, Time, Trigger, VariableTime,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Base = require("../classes/base");

  Trigger = (function(_super) {

    __extends(Trigger, _super);

    function Trigger() {
      return Trigger.__super__.constructor.apply(this, arguments);
    }

    Trigger.prototype.register = function() {};

    return Trigger;

  })(Base);

  Time = (function(_super) {

    __extends(Time, _super);

    function Time() {
      return Time.__super__.constructor.apply(this, arguments);
    }

    Time.prototype.defaults = {
      time: 100,
      interval: false
    };

    Time.prototype.register = function(fn) {
      var _this = this;
      return setTimeout(function() {
        fn();
        if (interval) {
          return _this.register(fn);
        }
      }, this.time);
    };

    return Time;

  })(Trigger);

  VariableTime = (function(_super) {

    __extends(VariableTime, _super);

    function VariableTime() {
      return VariableTime.__super__.constructor.apply(this, arguments);
    }

    VariableTime.prototype.defaults = {
      max: 100,
      min: 10,
      interval: false
    };

    VariableTime.prototype.register = function(fn) {
      var _this = this;
      return setTimeout(function() {
        fn();
        if (_this.interval) {
          return _this.register(fn);
        }
      }, this.min + Math.random() * (this.max - this.min));
    };

    return VariableTime;

  })(Trigger);

  Reactive = (function(_super) {

    __extends(Reactive, _super);

    function Reactive() {
      return Reactive.__super__.constructor.apply(this, arguments);
    }

    Reactive.prototype.defaults = {
      what: []
    };

    Reactive.prototype.register = function(fn) {
      var _this = this;
      return this.entity.on("view:change", function(_arg) {
        var entity;
        entity = _arg.entity;
        if (__indexOf.call(_this.what, name) >= 0) {
          return fn({
            entity: entity
          });
        }
      });
    };

    return Reactive;

  })(Trigger);

  Change = (function(_super) {

    __extends(Change, _super);

    function Change() {
      return Change.__super__.constructor.apply(this, arguments);
    }

    Change.prototype.defaults = {
      what: {}
    };

    Change.prototype.register = function(fn) {
      var amount, prop, _ref, _results,
        _this = this;
      _ref = this.what;
      _results = [];
      for (prop in _ref) {
        amount = _ref[prop];
        _results.push((function(prop, amount) {
          return _this.entity.on("change:" + prop, function(_arg) {
            var dif;
            dif = _arg.dif;
            if (Math.abs(dif) >= amount) {
              return fn({
                entity: _this.entity
              });
            }
          });
        })(prop, amount));
      }
      return _results;
    };

    return Change;

  })(Trigger);

  Immediately = (function(_super) {

    __extends(Immediately, _super);

    function Immediately() {
      return Immediately.__super__.constructor.apply(this, arguments);
    }

    Immediately.prototype.register = function(fn) {
      return fn();
    };

    return Immediately;

  })(Trigger);

  module.exports = {
    Immediately: Immediately,
    Reactive: Reactive,
    Time: Time,
    Change: Change,
    Trigger: Trigger,
    VariableTime: VariableTime
  };

}).call(this);
