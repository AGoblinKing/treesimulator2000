// Generated by CoffeeScript 1.3.3
(function() {
  var CSON, Entities, Entity, addEntity, dir, fs, path, walk, walker,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require("fs");

  walk = require("walk");

  CSON = require("cson");

  path = require("path");

  Entity = require("../classes/entity");

  dir = process.cwd().split(path.sep);

  if (dir[dir.length - 1] === "lib") {
    dir.splice(-1, 1);
  }

  walker = walk.walkSync("" + (dir.join(path.sep)) + "/data/entities");

  Entities = {};

  addEntity = function(name, data) {
    var DataEntity;
    return Entities[name] = DataEntity = (function(_super) {

      __extends(DataEntity, _super);

      function DataEntity() {
        return DataEntity.__super__.constructor.apply(this, arguments);
      }

      DataEntity.prototype.init = function() {
        var properties, property, value, _ref;
        properties = {};
        _ref = data.properties;
        for (property in _ref) {
          value = _ref[property];
          if (typeof value === "object") {
            switch (value.type) {
              case "range":
                value = value.min + Math.random * (value.max - value.min);
            }
          }
          properties[property] = value;
        }
        this.sets(properties);
        return this.loadGoals(data.goals);
      };

      return DataEntity;

    })(Entity);
  };

  walker.on("file", function(root, stat, next) {
    var contents;
    contents = fs.readFileSync("" + root + "/" + stat.name, "utf8");
    return addEntity(path.basename(stat.name, ".cson"), CSON.parseSync(contents));
  });

  module.exports = Entities;

}).call(this);
