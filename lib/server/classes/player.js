// Generated by CoffeeScript 1.3.3
(function() {
  var Entity, Player,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Entity = require("./entity");

  /*
      Player Class
      Instantiated per user, provides their area of concern
  */


  Player = (function(_super) {

    __extends(Player, _super);

    function Player() {
      return Player.__super__.constructor.apply(this, arguments);
    }

    Player.prototype.setSocket = function(socket) {
      var _this = this;
      this.socket = socket;
      this.socket.on("update", function(_arg) {
        var x, y, z;
        x = _arg.x, y = _arg.y, z = _arg.z;
        x = Math.floor(x);
        y = Math.floor(y);
        z = Math.floor(z);
        return _this.move([x, y, z]);
      });
      this.socket.emit("update", this.mapSimplify());
      return setInterval(function() {
        return _this.sendUpdates();
      }, this.updateTime);
    };

    Player.prototype.phantom = true;

    Player.prototype.view = 10;

    Player.prototype.updateTime = 100;

    Player.prototype.updates = {};

    Player.prototype.sendUpdates = function() {
      var batch, id, update, _ref;
      batch = [];
      _ref = this.updates;
      for (id in _ref) {
        update = _ref[id];
        batch.push(update);
      }
      if (batch.length > 0) {
        return this.socket.emit("update", batch);
      }
    };

    Player.prototype.events = {
      "change:view": function(_arg) {
        var entity, name, oldValue, update, value;
        entity = _arg.entity, name = _arg.name, value = _arg.value, oldValue = _arg.oldValue;
        if (name) {
          if (!this.updates[entity.id]) {
            update = {
              id: entity.id
            };
            update[name] = value;
            return this.updates[entity.id] = {
              properties: update
            };
          } else {
            return this.updates[entity.id].properties[name] = value;
          }
        } else {
          return this.updates[entity.id] = entity.simplify();
        }
      }
    };

    return Player;

  })(Entity);

  module.exports = Player;

}).call(this);
