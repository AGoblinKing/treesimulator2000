// Generated by CoffeeScript 1.3.3
(function() {
  var Base, CSON, Entity, Goal,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require("./base");

  Goal = require("./goal");

  CSON = require("cson");

  /*
      Basic Entity class
  */


  Entity = (function(_super) {

    __extends(Entity, _super);

    function Entity(overrides) {
      if (overrides == null) {
        overrides = {};
      }
      this.map = {};
      this.debug = false;
      this.goals = [];
      Entity.__super__.constructor.call(this, overrides);
    }

    Entity.prototype.setWorld = function(world) {
      this.world = world;
      return this.move(this.location);
    };

    Entity.prototype.move = function(location) {
      if (this.phantom) {
        this.location = location;
        return this.setViewBindings();
      } else {
        return this.world.move(this, location);
      }
    };

    Entity.prototype.mapSimplify = function() {
      var entity, location, view, _ref;
      view = [];
      _ref = this.map;
      for (location in _ref) {
        entity = _ref[location];
        if (entity) {
          view.push(entity.simplify());
        }
      }
      return view;
    };

    Entity.prototype.setViewBindings = function() {
      var event, fn, loc, newViews, offsetX, offsetY, offsetZ, oldEntity, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _ref4, _results,
        _this = this;
      newViews = [];
      if (!this.viewBindings) {
        this.viewBindings = {};
      }
      if (this.view > -1) {
        loc = this.location;
        for (offsetX = _i = _ref = -this.view, _ref1 = this.view; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; offsetX = _ref <= _ref1 ? ++_i : --_i) {
          for (offsetY = _j = _ref2 = -this.view, _ref3 = this.view; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; offsetY = _ref2 <= _ref3 ? ++_j : --_j) {
            for (offsetZ = _k = 0; _k <= 1; offsetZ = ++_k) {
              event = [loc[0] + offsetX, loc[1] + offsetY, offsetZ].join(":");
              newViews.push(event);
              if (!(this.viewBindings[event] != null)) {
                this.viewBindings[event] = function(bindEvent) {
                  var locationT, oldLocT;
                  locationT = bindEvent.location.join(":");
                  _this.map[locationT] = bindEvent.entity;
                  if (!_this.phantom && bindEvent.type === "move" && bindEvent.oldLocation && (oldLocT = bindEvent.oldLocation.join(":")) !== locationT) {
                    _this.map[oldLocT] = void 0;
                    delete _this.map[oldLocT];
                  }
                  return _this.emit("change:view", bindEvent);
                };
                this.world.loc(event, this.viewBindings[event]);
              }
            }
          }
        }
        _ref4 = this.viewBindings;
        _results = [];
        for (event in _ref4) {
          fn = _ref4[event];
          if (fn !== void 0) {
            if (newViews.indexOf(event) === -1) {
              if (fn != null) {
                this.world.removeListener(event, fn);
              }
              this.viewBindings[event] = void 0;
              delete this.viewBindings[event];
              oldEntity = void 0;
              if (this.map[event] != null) {
                oldEntity = this.map[event];
                this.map[event] = void 0;
                delete this.map[event];
              }
              _results.push(this.emit("change:view", {
                location: loc,
                type: "fog",
                entity: oldEntity
              }));
            } else {
              _results.push(void 0);
            }
          }
        }
        return _results;
      }
    };

    Entity.prototype.fromCSON = function(cson) {
      var data;
      data = CSON.parseSync(cson);
      return this.load(data);
    };

    Entity.prototype.load = function(data) {
      if (data == null) {
        data = {};
      }
      if (data.properties) {
        this.sets(data.properties);
      }
      if (data.goals) {
        this.loadGoals(data.goals);
      }
      if (data.privates) {
        this.sets(data.privates, this.privates);
      }
      if (data.view) {
        this.view = data.view;
      }
      if (data.debug) {
        this.debug = data.debug;
      }
      return this;
    };

    Entity.prototype.loadGoals = function(goals) {
      var goal, newGoal, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = goals.length; _i < _len; _i++) {
        goal = goals[_i];
        newGoal = new Goal(goal);
        _results.push(this.addGoal(newGoal));
      }
      return _results;
    };

    Entity.prototype.addGoal = function(goal) {
      this.goals.push(goal);
      return goal.register(this);
    };

    Entity.prototype.setView = function(view) {
      this.view = view;
      return this.setViewBindings();
    };

    Entity.prototype.bindings = {
      location: ["x", "y", "z"]
    };

    Entity.prototype.events = {
      "change": function(_arg) {
        var name, oldValue, value;
        name = _arg.name, value = _arg.value, oldValue = _arg.oldValue;
        if (!this.phantom && (this.world != null)) {
          return this.world.emit(this.location.join(":"), {
            type: "property",
            name: name,
            value: value,
            oldValue: oldValue,
            location: this.location,
            entity: this
          });
        }
      },
      "moved": function() {
        return this.setViewBindings();
      }
    };

    Entity.prototype.defaults = {
      x: 0,
      y: 0,
      z: 0
    };

    Entity.prototype.view = -1;

    Entity.prototype.phantom = false;

    return Entity;

  })(Base);

  module.exports = Entity;

}).call(this);
