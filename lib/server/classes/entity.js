// Generated by CoffeeScript 1.3.3
(function() {
  var Base, CSON, Entity, Goal,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require("./base");

  Goal = require("./goal");

  CSON = require("cson");

  /*
      Basic Entity class
  */


  Entity = (function(_super) {

    __extends(Entity, _super);

    function Entity(overrides) {
      if (overrides == null) {
        overrides = {};
      }
      this.map = {};
      this.debug = false;
      this.goals = [];
      Entity.__super__.constructor.call(this, overrides);
    }

    Entity.prototype.setWorld = function(world) {
      this.world = world;
      return this.move(this.location);
    };

    Entity.prototype.move = function(location) {
      if (this.phantom) {
        return this.location = location;
      } else {
        return this.world.move(this, location);
      }
    };

    Entity.prototype.mapSimplify = function() {
      var entity, location, view, _ref;
      view = [];
      _ref = this.map;
      for (location in _ref) {
        entity = _ref[location];
        if (entity) {
          view.push(entity.simplify());
        }
      }
      return view;
    };

    Entity.prototype.setViewBindings = function() {
      var event, fn, loc, offsetX, offsetY, offsetZ, _i, _ref, _ref1, _ref2, _results;
      if (this.viewBindings) {
        _ref = this.viewBindings;
        for (event in _ref) {
          fn = _ref[event];
          if (fn != null) {
            this.world.removeListener(event, fn);
          }
          delete this.viewBindings[event];
        }
      } else {
        this.viewBindings = {};
      }
      if (this.view > -1) {
        loc = this.location;
        _results = [];
        for (offsetX = _i = _ref1 = -this.view, _ref2 = this.view; _ref1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; offsetX = _ref1 <= _ref2 ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref3, _ref4, _results1;
            _results1 = [];
            for (offsetY = _j = _ref3 = -this.view, _ref4 = this.view; _ref3 <= _ref4 ? _j <= _ref4 : _j >= _ref4; offsetY = _ref3 <= _ref4 ? ++_j : --_j) {
              _results1.push((function() {
                var _k, _results2,
                  _this = this;
                _results2 = [];
                for (offsetZ = _k = 0; _k <= 1; offsetZ = ++_k) {
                  event = [loc[0] + offsetX, loc[1] + offsetY, offsetZ].join(":");
                  this.viewBindings[event] = function(event) {
                    var locationT, oldLocT;
                    locationT = event.location.join(":");
                    _this.map[locationT] = event.entity;
                    if (event.type === "move" && event.oldLocation && (oldLocT = event.oldLocation.join(":")) !== locationT) {
                      _this.map[oldLocT] = void 0;
                      delete _this.map[oldLocT];
                    }
                    return _this.emit("change:view", event);
                  };
                  _results2.push(this.world.loc(event, this.viewBindings[event]));
                }
                return _results2;
              }).call(this));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }
    };

    Entity.prototype.fromCSON = function(cson) {
      var data;
      data = CSON.parseSync(cson);
      return this.load(data);
    };

    Entity.prototype.load = function(data) {
      if (data == null) {
        data = {};
      }
      if (data.properties) {
        this.sets(data.properties);
      }
      if (data.goals) {
        this.loadGoals(data.goals);
      }
      if (data.view) {
        this.view = data.view;
      }
      if (data.debug) {
        this.debug = data.debug;
      }
      return this;
    };

    Entity.prototype.loadGoals = function(goals) {
      var goal, newGoal, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = goals.length; _i < _len; _i++) {
        goal = goals[_i];
        newGoal = new Goal(goal);
        _results.push(this.addGoal(newGoal));
      }
      return _results;
    };

    Entity.prototype.addGoal = function(goal) {
      this.goals.push(goal);
      return goal.register(this);
    };

    Entity.prototype.setView = function(view) {
      this.view = view;
      return this.setViewBindings();
    };

    Entity.prototype.bindings = {
      location: ["x", "y", "z"]
    };

    Entity.prototype.events = {
      "changed": function(_arg) {
        var name, oldValue, value, _ref;
        name = _arg.name, value = _arg.value, oldValue = _arg.oldValue;
        if (this.debug) {
          console.log(this.id, name, value, oldValue);
        }
        return (_ref = this.world) != null ? _ref.emit(this.location.join(":"), {
          type: "property",
          name: name,
          value: value,
          oldValue: oldValue,
          location: this.location,
          entity: this
        }) : void 0;
      },
      "change:location": function() {
        return this.setViewBindings();
      }
    };

    Entity.prototype.defaults = {
      x: 0,
      y: 0,
      z: 0
    };

    Entity.prototype.view = -1;

    Entity.prototype.phantom = false;

    return Entity;

  })(Base);

  module.exports = Entity;

}).call(this);
