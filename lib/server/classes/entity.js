// Generated by CoffeeScript 1.3.3
(function() {
  var Entity, EventEmitter, uuid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require("events").EventEmitter;

  uuid = require("node-uuid");

  /*
      Basic Entity class
  */


  Entity = (function(_super) {

    __extends(Entity, _super);

    function Entity(overrides) {
      var name, value;
      if (overrides == null) {
        overrides = {};
      }
      this.map = {};
      this.properties = {};
      this.children = [];
      this.handleSupers(this.constructor, this.sets, "defaults");
      this.sets(this.defaults);
      this.set("id", uuid.v4());
      this.handleSupers(this.constructor, this.setBindings, "bindings");
      this.setBindings(this.bindings);
      this.init();
      for (name in overrides) {
        value = overrides[name];
        this[name] = value;
      }
      this.setMaxListeners(0);
      this.handleSupers(this.constructor, this.setEvents, "events");
      this.setEvents(this.events);
    }

    Entity.prototype.handleSupers = function(level, fn, prop) {
      if (level.__super__[prop]) {
        fn.call(this, level.__super__[prop]);
        return this.handleSupers(level.__super__.constructor, fn, prop);
      }
    };

    Entity.prototype.setWorld = function(world) {
      this.world = world;
      return this.move(this.location);
    };

    Entity.prototype.init = function() {};

    Entity.prototype.sets = function(values) {
      var name, value, _results;
      _results = [];
      for (name in values) {
        value = values[name];
        _results.push(this.set(name, value));
      }
      return _results;
    };

    Entity.prototype.move = function(location) {
      if (this.phantom) {
        return this.location = location;
      } else {
        return this.world.move(this, location);
      }
    };

    Entity.prototype.set = function(name, value) {
      this.properties[name] = value;
      if (!this.__lookupGetter__(name)) {
        this.__defineGetter__(name, function() {
          return this.properties[name];
        });
        return this.__defineSetter__(name, function(val) {
          var oldProp;
          oldProp = this.properties[name];
          this.properties[name] = val;
          this.emit("changed", {
            name: name,
            value: val,
            oldValue: oldProp
          });
          return this.emit("change:" + name, {
            value: val,
            oldValue: oldProp
          });
        });
      }
    };

    Entity.prototype.mapSimplify = function() {
      var entity, location, view, _ref;
      view = [];
      _ref = this.map;
      for (location in _ref) {
        entity = _ref[location];
        if (entity) {
          view.push(entity.simplify());
        }
      }
      return view;
    };

    Entity.prototype.simplify = function() {
      var child, simple, _i, _len, _ref;
      simple = {
        children: [],
        properties: this.properties
      };
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        simple.children.push(child.simplify());
      }
      return simple;
    };

    Entity.prototype.toJSON = function(recurse) {
      if (recurse) {
        return JSON.stringify(this.simplify());
      } else {
        return JSON.stringify(this.properties);
      }
    };

    Entity.prototype.add = function(child) {
      this.children.push(child);
      child.parent = this;
      child.emit("added", {
        entity: this
      });
      return this.emit("add", {
        entity: child
      });
    };

    Entity.prototype.remove = function(child) {
      var location;
      location = this.children.indexOf(child);
      if (location !== -1) {
        this.children.splice(location, 1);
        child.parent = void 0;
        this.emit("remove", {
          entity: child
        });
        return child.emit("removed", {
          entity: this
        });
      }
    };

    Entity.prototype.setEvents = function(events) {
      var event, handler, _results;
      _results = [];
      for (event in events) {
        handler = events[event];
        if (typeof handler === "function") {
          _results.push(this.on(event, handler));
        } else if (typeof handler === "string") {
          _results.push(this.on(event, this[handler]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Entity.prototype.setBindings = function(bindings) {
      var binding, values, _results,
        _this = this;
      _results = [];
      for (binding in bindings) {
        values = bindings[binding];
        _results.push((function(binding, values) {
          var bind, prop, _i, _len, _results1;
          _this.__defineGetter__(_this.properties[binding], function() {
            return _this[binding];
          });
          if (typeof values === "string") {
            bind = values.split(" ");
            _this.__defineGetter__(binding, function() {
              return this[bind[0]][bind[1]];
            });
            _this.__defineSetter__(binding, function(value) {
              this[bind[0]][bind[1]] = value;
              this.emit("change:" + binding, {
                value: value
              });
              return this.emit("change:" + bind[0], {
                value: this[bind[0]]
              });
            });
            return _this.on("change:" + bind[0], function(_arg) {
              var oldValue, value;
              value = _arg.value, oldValue = _arg.oldValue;
              if (!oldValue || value[bind[1]] !== oldValue[bind[1]]) {
                return this.emit("change:" + binding, {
                  value: value,
                  oldValue: oldValue[bind[1]]
                });
              }
            });
          } else {
            _this.__defineGetter__(binding, function() {
              var prop, ret, _i, _len;
              ret = [];
              for (_i = 0, _len = values.length; _i < _len; _i++) {
                prop = values[_i];
                ret.push(this[prop]);
              }
              return ret;
            });
            _this.__defineSetter__(binding, function(value) {
              var i, prop, _i, _len;
              for (i = _i = 0, _len = value.length; _i < _len; i = ++_i) {
                prop = value[i];
                if (this[values[i]] !== prop) {
                  this[values[i]] = prop;
                }
              }
              return this.emit("change:" + binding, {
                value: value
              });
            });
            _results1 = [];
            for (_i = 0, _len = values.length; _i < _len; _i++) {
              prop = values[_i];
              _results1.push((function(binding, prop) {
                return _this.on("change:" + prop, function(_arg) {
                  var value;
                  value = _arg.value;
                  return this.emit("change:" + binding, {
                    value: this[binding]
                  });
                });
              })(binding, prop));
            }
            return _results1;
          }
        })(binding, values));
      }
      return _results;
    };

    Entity.prototype.setViewBindings = function() {
      var event, fn, loc, offsetX, offsetY, offsetZ, _i, _ref, _ref1, _ref2, _results;
      if (this.viewBindings) {
        _ref = this.viewBindings;
        for (event in _ref) {
          fn = _ref[event];
          if (fn != null) {
            this.world.removeListener(event, fn);
          }
          delete this.viewBindings[event];
        }
      } else {
        this.viewBindings = {};
      }
      if (this.view > -1) {
        loc = this.location;
        _results = [];
        for (offsetX = _i = _ref1 = -this.view, _ref2 = this.view; _ref1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; offsetX = _ref1 <= _ref2 ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref3, _ref4, _results1;
            _results1 = [];
            for (offsetY = _j = _ref3 = -this.view, _ref4 = this.view; _ref3 <= _ref4 ? _j <= _ref4 : _j >= _ref4; offsetY = _ref3 <= _ref4 ? ++_j : --_j) {
              _results1.push((function() {
                var _k, _results2,
                  _this = this;
                _results2 = [];
                for (offsetZ = _k = 0; _k <= 1; offsetZ = ++_k) {
                  event = [loc[0] + offsetX, loc[1] + offsetY, offsetZ].join(":");
                  this.viewBindings[event] = function(event) {
                    var locationT, oldLocT;
                    locationT = event.location.join(":");
                    _this.map[locationT] = event.entity;
                    if (event.type === "move" && event.oldLocation && (oldLocT = event.oldLocation.join(":")) !== locationT) {
                      _this.map[oldLocT] = void 0;
                      delete _this.map[oldLocT];
                    }
                    return _this.emit("change:view", event);
                  };
                  _results2.push(this.world.loc(event, this.viewBindings[event]));
                }
                return _results2;
              }).call(this));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }
    };

    Entity.prototype.setView = function(view) {
      this.view = view;
      return this.setViewBindings();
    };

    Entity.prototype.bindings = {
      location: ["x", "y", "z"]
    };

    Entity.prototype.events = {
      "changed": function(_arg) {
        var name, oldValue, value, _ref;
        name = _arg.name, value = _arg.value, oldValue = _arg.oldValue;
        return (_ref = this.world) != null ? _ref.emit(this.location.join(":"), {
          type: "property",
          name: name,
          value: value,
          oldValue: oldValue,
          location: this.location,
          entity: this
        }) : void 0;
      },
      "change:location": function() {
        return this.setViewBindings();
      }
    };

    Entity.prototype.defaults = {
      x: 0,
      y: 0,
      z: 0
    };

    Entity.prototype.view = -1;

    Entity.prototype.phantom = false;

    return Entity;

  })(EventEmitter);

  module.exports = Entity;

}).call(this);
