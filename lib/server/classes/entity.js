// Generated by CoffeeScript 1.3.3
(function() {
  var Entity, EventEmitter, uuid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require("events").EventEmitter;

  uuid = require("node-uuid");

  /*
      Basic Entity class
  */


  Entity = (function(_super) {

    __extends(Entity, _super);

    function Entity(overrides, world) {
      if (overrides == null) {
        overrides = {};
      }
      this.world = world;
      this.properties = {};
      this.children = [];
      this.sets(this.defaults);
      this.set("id", uuid.v4());
      this.init();
      this.sets(overrides);
      this.setMaxListeners(0);
      this.setBindings(this.bindings);
      this.setEvents(this.events);
      if (this.world) {
        this.move(this.location);
      }
      this.world.requestView("");
    }

    Entity.prototype.init = function() {};

    Entity.prototype.sets = function(values) {
      var name, value, _results;
      _results = [];
      for (name in values) {
        value = values[name];
        _results.push(this.set(name, value));
      }
      return _results;
    };

    Entity.prototype.move = function(location) {
      return this.world.move(this, location);
    };

    Entity.prototype.set = function(name, value) {
      this.properties[name] = value;
      if (!this.__lookupGetter__(name)) {
        this.__defineGetter__(name, function() {
          return this.properties[name];
        });
        return this.__defineSetter__(name, function(val) {
          var oldProp;
          oldProp = this.properties[name];
          this.properties[name] = val;
          this.emit("changed", name, val, oldProp);
          return this.emit("change:" + name, val, oldProp);
        });
      }
    };

    Entity.prototype.simplify = function() {
      var child, simple, _i, _len, _ref;
      simple = {
        children: [],
        properties: this.properties
      };
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        simple.children.push(child.simplify());
      }
      return simple;
    };

    Entity.prototype.toJSON = function(recurse) {
      if (recurse) {
        return JSON.stringify(this.simplify());
      } else {
        return JSON.stringify(this.properties);
      }
    };

    Entity.prototype.add = function(child) {
      this.children.push(child);
      child.parent = this;
      child.emit("added", this);
      return this.emit("add", child, this.children);
    };

    Entity.prototype.remove = function(child) {
      var location;
      location = this.children.indexOf(child);
      if (location !== -1) {
        this.children.splice(location, 1);
        child.parent = void 0;
        this.emit("remove", child, this.children);
        return child.emit("removed", this);
      }
    };

    Entity.prototype.setEvents = function(events) {
      var event, handler, _results;
      _results = [];
      for (event in events) {
        handler = events[event];
        if (typeof handler === "Function") {
          _results.push(this.on(event, handler));
        } else if (typeof handler === "String") {
          _results.push(this.on(event, this[handler]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Entity.prototype.setBindings = function(bindings) {
      var binding, values, _results,
        _this = this;
      _results = [];
      for (binding in bindings) {
        values = bindings[binding];
        _results.push((function(binding, values) {
          var prop, _i, _len, _results1;
          _this.__defineGetter__(binding, function() {
            var prop, ret, _i, _len;
            ret = [];
            for (_i = 0, _len = values.length; _i < _len; _i++) {
              prop = values[_i];
              ret.push(this[prop]);
            }
            return ret;
          });
          _this.__defineSetter__(binding, function(value) {
            var i, prop, _i, _len;
            for (i = _i = 0, _len = value.length; _i < _len; i = ++_i) {
              prop = value[i];
              if (this[values[i]] !== prop) {
                this[values[i]] = prop;
              }
            }
            return this.emit("change:" + binding, this[binding]);
          });
          _results1 = [];
          for (_i = 0, _len = values.length; _i < _len; _i++) {
            prop = values[_i];
            _results1.push((function(binding, prop) {
              return _this.on("change:" + prop, function(value) {
                return this.emit("change:" + binding, this[binding]);
              });
            })(binding, prop));
          }
          return _results1;
        })(binding, values));
      }
      return _results;
    };

    Entity.prototype.viewBindings = function() {
      var event, fn, offsetX, offsetY, offsetZ, pos, _i, _j, _len, _ref, _ref1, _ref2, _results;
      if (this.viewBindings) {
        _ref = this.viewBindings;
        for (fn = _i = 0, _len = _ref.length; _i < _len; fn = ++_i) {
          event = _ref[fn];
          this.world.removeEventListener(event, fn);
          this.viewBindings[event] = void 0;
        }
      } else {
        this.viewBindings = {};
      }
      if (this.view > -1) {
        pos = this.position;
        _results = [];
        for (offsetX = _j = _ref1 = -this.view, _ref2 = this.view; _ref1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; offsetX = _ref1 <= _ref2 ? ++_j : --_j) {
          _results.push((function() {
            var _k, _ref3, _ref4, _results1;
            _results1 = [];
            for (offsetY = _k = _ref3 = -this.view, _ref4 = this.view; _ref3 <= _ref4 ? _k <= _ref4 : _k >= _ref4; offsetY = _ref3 <= _ref4 ? ++_k : --_k) {
              _results1.push((function() {
                var _l, _results2,
                  _this = this;
                _results2 = [];
                for (offsetZ = _l = 0; _l <= 1; offsetZ = ++_l) {
                  event = [pos.x + offsetX, pos.y + offsetY, offsetZ].join(":");
                  this.viewBindings[event] = function(position, entity) {
                    return _this.emit("change:view", position, entity);
                  };
                  _results2.push(this.world.loc(event, this.viewBindings[event]));
                }
                return _results2;
              }).call(this));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }
    };

    Entity.prototype.changeView = function(position, entity) {
      return this.map[position.join(":")] = entity;
    };

    Entity.prototype.bindings = {
      "location": ["x", "y", "z"]
    };

    Entity.prototype.events = {
      "moved": function(location) {
        this.location = location;
        return this.viewBindings();
      },
      "change:view": "changeView"
    };

    Entity.prototype.defaults = {
      x: 0,
      y: 0,
      z: 0,
      view: -1
    };

    return Entity;

  })(EventEmitter);

  module.exports = Entity;

}).call(this);
