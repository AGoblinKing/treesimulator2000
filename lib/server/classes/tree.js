// Generated by CoffeeScript 1.3.3
(function() {
  var Entity, Tree,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Entity = require("Entity");

  Tree = (function(_super) {

    __extends(Tree, _super);

    function Tree() {
      return Tree.__super__.constructor.apply(this, arguments);
    }

    Tree.prototype.init = function() {
      this.sets(Entity.prototype.defaults);
      this.setBindings(Entity.prototype.bindings);
      return this.getEating();
    };

    Tree.prototype.getEating = function() {
      var _this = this;
      return this.eater = setTimeout(function() {
        _this.eat();
        return _this.getEating();
      }, this.minEatTime + Math.random() * (this.maxEatTime - this.minEatTime));
    };

    Tree.prototype.eat = function() {
      var entity, nutrient, _i, _len, _ref, _results;
      _ref = this.map;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = this.bindings.nutrients;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            nutrient = _ref1[_j];
            if (entity[nutrient] && entity[nutrient] > 0) {
              _results1.push(entity.emit("eat", nutrient, this.eatRate, this));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Tree.prototype.maxEatTime = 2;

    Tree.prototype.minEatTime = .5;

    Tree.prototype.eatRate = 1;

    Tree.prototype.defaults = {
      potassium: 0,
      nitrogen: 0,
      phosphorus: 0
    };

    Tree.prototype.bindings = {
      nutrients: ["potassium", "nitrogen", "phosphorus"]
    };

    return Tree;

  })(Entity);

}).call(this);
