// Generated by CoffeeScript 1.3.3
(function() {
  var Entity, Tree,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Entity = require("./entity");

  Tree = (function(_super) {

    __extends(Tree, _super);

    function Tree() {
      return Tree.__super__.constructor.apply(this, arguments);
    }

    Tree.prototype.setWorld = function(world) {
      this.world = world;
      Tree.__super__.setWorld.call(this, this.world);
      this.getEating();
      return this.getBreeding();
    };

    Tree.prototype.getBreeding = function() {
      var _this = this;
      return this.breeder = setTimeout(function() {
        if (_this.potassium > _this.spawnCost && _this.nitrogen > _this.spawnCost && _this.phosphorus > _this.spawnCost) {
          _this.spawn();
        }
        return _this.getBreeding();
      }, Math.floor((this.minSpawnRate + Math.random() * (this.maxSpawnRate - this.minSpawnRate)) * this.timeRate));
    };

    Tree.prototype.getEating = function() {
      var _this = this;
      return this.eater = setTimeout(function() {
        _this.doEat();
        return _this.getEating();
      }, Math.floor((this.minEatTime + Math.random() * (this.maxEatTime - this.minEatTime)) * this.timeRate));
    };

    Tree.prototype.getSpawnDistance = function() {
      return Math.floor(this.minSpawnDistance + Math.random() * (this.maxSpawnDistance - this.minSpawnDistance + 1)) * -Math.round(Math.random());
    };

    Tree.prototype.spawn = function() {
      var nutrient, tree, _i, _len, _ref;
      _ref = this.bindings.nutrients;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nutrient = _ref[_i];
        this[nutrient] -= this.spawnCost;
      }
      tree = new Tree({
        x: this.x + this.getSpawnDistance(),
        y: this.y + this.getSpawnDistance(),
        z: 1
      });
      return this.world.add(tree);
    };

    Tree.prototype.upkeep = function() {
      var nutrient, _i, _len, _ref, _results;
      _ref = this.bindings.nutrients;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nutrient = _ref[_i];
        _results.push(this[nutrient] -= this.upkeepRate);
      }
      return _results;
    };

    Tree.prototype.doEat = function() {
      var entity, location, nutrient, _ref, _results;
      _ref = this.map;
      _results = [];
      for (location in _ref) {
        entity = _ref[location];
        if (entity.id !== this.id) {
          _results.push((function() {
            var _i, _len, _ref1, _results1;
            _ref1 = this.bindings.nutrients;
            _results1 = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              nutrient = _ref1[_i];
              _results1.push(entity.emit("eat", {
                what: nutrient,
                howMuch: this.eatRate,
                who: this
              }));
            }
            return _results1;
          }).call(this));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Tree.prototype.getFed = function(_arg) {
      var howMuch, what, who;
      what = _arg.what, howMuch = _arg.howMuch, who = _arg.who;
      return this[what] += howMuch;
    };

    Tree.prototype.maxEatTime = 2;

    Tree.prototype.minEatTime = .5;

    Tree.prototype.maxSpawnDistance = 3;

    Tree.prototype.minSpawnDistance = 2;

    Tree.prototype.spawnCost = 20;

    Tree.prototype.maxSpawnRate = 10;

    Tree.prototype.minSpawnRate = 5;

    Tree.prototype.timeRate = 1000;

    Tree.prototype.eatRate = 2;

    Tree.prototype.defaults = {
      potassium: 5,
      nitrogen: 5,
      type: "tree",
      phosphorus: 5
    };

    Tree.prototype.view = 1;

    Tree.prototype.events = {
      "feed": "getFed"
    };

    Tree.prototype.bindings = {
      nutrients: ["potassium", "nitrogen", "phosphorus"]
    };

    return Tree;

  })(Entity);

  module.exports = Tree;

}).call(this);
