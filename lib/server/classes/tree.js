// Generated by CoffeeScript 1.3.3
(function() {
  var Entity, Tree,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Entity = require("./entity");

  Tree = (function(_super) {

    __extends(Tree, _super);

    function Tree() {
      return Tree.__super__.constructor.apply(this, arguments);
    }

    Tree.prototype.init = function() {
      if (this.world) {
        return this.getEating();
      }
    };

    Tree.prototype.getEating = function() {
      var _this = this;
      return this.eater = setTimeout(function() {
        _this.doEat();
        return _this.getEating();
      }, Math.floor((this.minEatTime + Math.random() * (this.maxEatTime - this.minEatTime)) * this.eatTimeRate));
    };

    Tree.prototype.doEat = function() {
      var entity, location, nutrient, _ref, _results;
      _ref = this.map;
      _results = [];
      for (location in _ref) {
        entity = _ref[location];
        if (entity.id !== this.id) {
          _results.push((function() {
            var _i, _len, _ref1, _results1;
            _ref1 = this.bindings.nutrients;
            _results1 = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              nutrient = _ref1[_i];
              _results1.push(entity.emit("eat", nutrient, this.eatRate, this));
            }
            return _results1;
          }).call(this));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Tree.prototype.getFed = function(what, howMuch, who) {
      return this[what] += howMuch;
    };

    Tree.prototype.maxEatTime = 2;

    Tree.prototype.minEatTime = .5;

    Tree.prototype.eatTimeRate = 1000 * 60 * 60;

    Tree.prototype.eatRate = 1;

    Tree.prototype.defaults = {
      potassium: 0,
      nitrogen: 0,
      phosphorus: 0,
      view: 1
    };

    Tree.prototype.events = {
      "feed": "getFed"
    };

    Tree.prototype.bindings = {
      nutrients: ["potassium", "nitrogen", "phosphorus"]
    };

    return Tree;

  })(Entity);

  module.exports = Tree;

}).call(this);
