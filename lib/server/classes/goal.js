// Generated by CoffeeScript 1.3.3
(function() {
  var Breed, Entity, Give, Immediately, Move, Reactive, Take, Time,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Entity = require("./entity");

  Time = (function(_super) {

    __extends(Time, _super);

    function Time() {
      return Time.__super__.constructor.apply(this, arguments);
    }

    Time.prototype.defaults = {
      time: 100,
      interval: false
    };

    Time.prototype["do"] = function(fn) {
      var _this = this;
      return setTimeout(function() {
        fn();
        if (interval) {
          return _this.execute(fn);
        }
      }, this.time);
    };

    return Time;

  })(Trigger);

  Reactive = (function(_super) {

    __extends(Reactive, _super);

    function Reactive() {
      return Reactive.__super__.constructor.apply(this, arguments);
    }

    Reactive.prototype.defaults = {
      what: []
    };

    Reactive.prototype["do"] = function(fn) {
      var _this = this;
      return this.entity.on("view:change", function(entity, name, value) {
        if (__indexOf.call(_this.what, name) >= 0) {
          return fn(entity, name, value);
        }
      });
    };

    return Reactive;

  })(Trigger);

  Immediately = (function(_super) {

    __extends(Immediately, _super);

    function Immediately() {
      return Immediately.__super__.constructor.apply(this, arguments);
    }

    Immediately.prototype["do"] = function(fn) {
      return fn();
    };

    return Immediately;

  })(Trigger);

  Move = (function(_super) {

    __extends(Move, _super);

    function Move() {
      return Move.__super__.constructor.apply(this, arguments);
    }

    Move.prototype.defaults = {
      where: [0, 0, 0]
    };

    Move.prototype["do"] = function() {};

    return Move;

  })(Action);

  Give = (function(_super) {

    __extends(Give, _super);

    function Give() {
      return Give.__super__.constructor.apply(this, arguments);
    }

    Give.prototype.defaults = {
      what: [],
      max: 0,
      min: 0,
      howMuch: 0
    };

    Give.prototype.events = {
      "take": function(_arg) {
        var howMuch, what;
        what = _arg.what, howMuch = _arg.howMuch;
      }
    };

    Give.prototype["do"] = function(_arg) {
      _arg;
    };

    return Give;

  })(Action);

  Take = (function(_super) {

    __extends(Take, _super);

    function Take() {
      return Take.__super__.constructor.apply(this, arguments);
    }

    Take.prototype.defaults = {
      what: [],
      howMuch: [],
      distance: 0
    };

    Take.prototype["do"] = function() {
      var entity, location, _ref, _results;
      _ref = this.entity.map;
      _results = [];
      for (location in _ref) {
        entity = _ref[location];
        if (entity.id !== this.entity.id) {
          _results.push(entity.emit("take", {
            what: this.what,
            "with": this["with"],
            who: this
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Take.prototype.events = {
      "give": function(_arg) {
        var howMuch, what;
        what = _arg.what, howMuch = _arg.howMuch;
      }
    };

    return Take;

  })(Action);

  Breed = (function(_super) {

    __extends(Breed, _super);

    function Breed() {
      return Breed.__super__.constructor.apply(this, arguments);
    }

    Breed.prototype.defaults = what;

    return Breed;

  })(Action);

}).call(this);
