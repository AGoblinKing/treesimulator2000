// Generated by CoffeeScript 1.3.3
(function() {
  var Actions, Conditionals, Goal, Triggers, logger;

  Actions = require("../actions");

  Conditionals = require("../conditionals");

  Triggers = require("../triggers");

  logger = require("../logger");

  Goal = (function() {

    function Goal(args) {
      var actions, conditionals, reactions, triggers;
      if (args == null) {
        args = {};
      }
      this.actions = [];
      this.conditionals = [];
      this.triggers = [];
      this.reactions = [];
      this.name = args.name, actions = args.actions, conditionals = args.conditionals, triggers = args.triggers, reactions = args.reactions;
      this.registerType(actions, Actions, this.actions);
      this.registerType(conditionals, Conditionals, this.conditionals);
      this.registerType(reactions, Actions, this.reactions);
      this.registerType(triggers, Triggers, this.triggers);
    }

    Goal.prototype.registerType = function(types, classHolder, localHolder) {
      var type, _i, _len, _results;
      if (types) {
        _results = [];
        for (_i = 0, _len = types.length; _i < _len; _i++) {
          type = types[_i];
          type.type = type.type.charAt(0).toUpperCase() + type.type.slice(1);
          if (classHolder[type.type]) {
            _results.push(localHolder.push(new classHolder[type.type](type)));
          } else {
            _results.push(logger.error("Unable to load type for goal " + type.type));
          }
        }
        return _results;
      }
    };

    Goal.prototype.start = function() {
      this.setReactions(this.reactions);
      this.setActions(this.actions);
      this.setConditionals(this.conditionals);
      return this.setTriggers(this.triggers);
    };

    Goal.prototype.register = function(entity) {
      this.entity = entity;
      return this.start();
    };

    Goal.prototype.execute = function() {
      var action, _i, _len, _ref, _results;
      _ref = this.actions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        action = _ref[_i];
        _results.push(action["do"].apply(action, arguments));
      }
      return _results;
    };

    Goal.prototype.applyInfo = function(item) {
      item.entity = this.entity;
      return item.goal = this;
    };

    Goal.prototype.setConditionals = function(conditionals) {
      var conditional, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = conditionals.length; _i < _len; _i++) {
        conditional = conditionals[_i];
        _results.push(this.applyInfo(conditional));
      }
      return _results;
    };

    Goal.prototype.setActions = function(actions) {
      var action, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = actions.length; _i < _len; _i++) {
        action = actions[_i];
        _results.push(this.applyInfo(action));
      }
      return _results;
    };

    Goal.prototype.setTriggers = function(triggers) {
      var trigger, _i, _len, _results,
        _this = this;
      _results = [];
      for (_i = 0, _len = triggers.length; _i < _len; _i++) {
        trigger = triggers[_i];
        this.applyInfo(trigger);
        _results.push(trigger.register(function() {
          return _this.execute.apply(_this, arguments);
        }));
      }
      return _results;
    };

    Goal.prototype.setReactions = function(reactions) {
      var event, fn, reaction, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = reactions.length; _i < _len; _i++) {
        reaction = reactions[_i];
        this.applyInfo(reaction);
        _results.push((function() {
          var _ref, _results1,
            _this = this;
          _ref = reaction.reactions;
          _results1 = [];
          for (event in _ref) {
            fn = _ref[event];
            _results1.push((function(event, fn) {
              return _this.entity.on(event, function() {
                return fn.apply(reaction, arguments);
              });
            })(event, fn));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Goal.prototype.simplify = function() {
      var action, conditional, reaction, simple, trigger, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      simple = this.parent();
      simple.triggers = [];
      simple.conditionals = [];
      simple.actions = [];
      simple.reactions = [];
      _ref = this.reactions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        reaction = _ref[_i];
        simple.reactions.push(reaction.simplify);
      }
      _ref1 = this.triggers;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        trigger = _ref1[_j];
        simple.triggers.push(trigger.simplify());
      }
      _ref2 = this.conditionals;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        conditional = _ref2[_k];
        simple.conditionals.push(conditional.simplify());
      }
      _ref3 = this.actions;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        action = _ref3[_l];
        simple.actions.push(action.simplify());
      }
      return simple;
    };

    return Goal;

  })();

  module.exports = Goal;

}).call(this);
