// Generated by CoffeeScript 1.3.3
(function() {
  var Base, Entity, Land, Tree, World, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Entity = require("./entity");

  Base = require("./base");

  /*
      The world object + persistence
  */


  _ref = require("../entities"), Land = _ref.Land, Tree = _ref.Tree;

  World = (function(_super) {

    __extends(World, _super);

    function World() {
      return World.__super__.constructor.apply(this, arguments);
    }

    World.prototype.init = function() {
      return this.locations = {};
    };

    World.prototype.generate = function(w, h) {
      var t, x, y, _i, _j, _k, _results;
      for (x = _i = 0; 0 <= w ? _i <= w : _i >= w; x = 0 <= w ? ++_i : --_i) {
        for (y = _j = 0; 0 <= h ? _j <= h : _j >= h; y = 0 <= h ? ++_j : --_j) {
          this.add(new Land({
            x: x,
            y: y
          }, this));
        }
      }
      _results = [];
      for (t = _k = 0; _k <= 10; t = ++_k) {
        _results.push(this.add(new Tree({
          x: Math.floor(Math.random() * w),
          y: Math.floor(Math.random() * h),
          z: 1
        })));
      }
      return _results;
    };

    World.prototype.add = function(entity) {
      entity.setWorld(this);
      return World.__super__.add.call(this, entity);
    };

    World.prototype.loc = function(event, fn) {
      this.on.apply(this, arguments);
      if (this.locations[event]) {
        return fn({
          type: "look",
          location: this.locations[event].location,
          entity: this.locations[event]
        });
      }
    };

    World.prototype.move = function(entity, location) {
      var dest, oldLoc, sLoc;
      sLoc = location.join(":");
      dest = this.locations[sLoc];
      if (!dest) {
        this.locations[sLoc] = entity;
        if (entity.location.join(":") !== sLoc) {
          this.locations[entity.location.join(":")] = void 0;
        }
        oldLoc = entity.location;
        entity.location = location;
        return this.emit(sLoc, {
          location: location,
          entity: entity,
          oldLocation: oldLoc,
          type: "move"
        });
      } else {
        entity.emit("collision", {
          entity: dest,
          location: location
        });
        return dest.emit("collision", {
          entity: entity,
          location: location
        });
      }
    };

    return World;

  })(Base);

  module.exports = World;

}).call(this);
