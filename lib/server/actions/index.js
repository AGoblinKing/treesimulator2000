// Generated by CoffeeScript 1.3.3
(function() {
  var Action, Base, Change, Create, Destroy, Give, Take,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require("../classes/base");

  Action = (function(_super) {

    __extends(Action, _super);

    function Action() {
      return Action.__super__.constructor.apply(this, arguments);
    }

    Action.prototype["do"] = function() {};

    Action.prototype.reactions = {};

    return Action;

  })(Base);

  Give = (function(_super) {

    __extends(Give, _super);

    function Give() {
      return Give.__super__.constructor.apply(this, arguments);
    }

    Give.prototype.defaults = {
      what: [],
      max: 0,
      min: 0,
      howMuch: []
    };

    Give.prototype.reactions = {
      "give": function(_arg) {
        var amount, item, what, _results;
        what = _arg.what;
        _results = [];
        for (item in what) {
          amount = what[item];
          _results.push(this.entity[item] += amount);
        }
        return _results;
      }
    };

    return Give;

  })(Action);

  Change = (function(_super) {

    __extends(Change, _super);

    function Change() {
      return Change.__super__.constructor.apply(this, arguments);
    }

    Change.prototype.defaults = {
      what: {}
    };

    Change.prototype["do"] = function() {
      var amount, property, _i, _len, _ref, _results;
      _ref = this.what;
      _results = [];
      for (amount = _i = 0, _len = _ref.length; _i < _len; amount = ++_i) {
        property = _ref[amount];
        if (this[property] != null) {
          _results.push(this[property] += amount);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Change;

  })(Action);

  Destroy = (function(_super) {

    __extends(Destroy, _super);

    function Destroy() {
      return Destroy.__super__.constructor.apply(this, arguments);
    }

    Destroy.prototype["do"] = function() {
      return this.goal.destroy();
    };

    return Destroy;

  })(Action);

  Create = (function(_super) {

    __extends(Create, _super);

    function Create() {
      return Create.__super__.constructor.apply(this, arguments);
    }

    Create.prototype.what = {};

    Create.prototype.findSpot = function() {};

    Create.prototype["do"] = function() {};

    return Create;

  })(Action);

  Take = (function(_super) {

    __extends(Take, _super);

    function Take() {
      return Take.__super__.constructor.apply(this, arguments);
    }

    Take.prototype.defaults = {
      what: {},
      distance: 0
    };

    Take.prototype["do"] = function() {
      var entity, location, _ref, _results;
      _ref = this.entity.map;
      _results = [];
      for (location in _ref) {
        entity = _ref[location];
        if (entity != null) {
          if (entity.id !== this.entity.id) {
            _results.push(entity.emit("take", {
              what: this.what,
              who: this.entity
            }));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };

    Take.prototype.reactions = {
      "take": function(_arg) {
        var amount, item, what, whatToGive, who;
        what = _arg.what, who = _arg.who;
        whatToGive = {};
        for (item in what) {
          amount = what[item];
          if (this.entity[item] && this.entity[item] > 0) {
            if (this.entity[item] <= amount) {
              amount = this.entity[item];
            }
            this.entity[item] -= amount;
            whatToGive[item] = amount;
          }
        }
        return who.emit("give", {
          what: whatToGive,
          who: this.entity
        });
      }
    };

    return Take;

  })(Action);

  module.exports = {
    Take: Take,
    Action: Action,
    Give: Give,
    Change: Change,
    Destroy: Destroy,
    Create: Create
  };

}).call(this);
