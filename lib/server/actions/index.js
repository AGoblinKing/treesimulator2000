// Generated by CoffeeScript 1.3.3
(function() {
  var Action, Base, Give, Take,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require("../classes/base");

  Action = (function(_super) {

    __extends(Action, _super);

    function Action() {
      return Action.__super__.constructor.apply(this, arguments);
    }

    return Action;

  })(Base);

  Give = (function(_super) {

    __extends(Give, _super);

    function Give() {
      return Give.__super__.constructor.apply(this, arguments);
    }

    Give.prototype.defaults = {
      what: [],
      max: 0,
      min: 0,
      howMuch: 0
    };

    Give.prototype.reactions = {
      "give": function(_arg) {
        var howMuch, what;
        what = _arg.what, howMuch = _arg.howMuch;
        return this.entity[what] += howMuch;
      }
    };

    Give.prototype["do"] = function(_arg) {
      _arg;
    };

    return Give;

  })(Action);

  Take = (function(_super) {

    __extends(Take, _super);

    function Take() {
      return Take.__super__.constructor.apply(this, arguments);
    }

    Take.prototype.defaults = {
      what: [],
      howMuch: [],
      distance: 0
    };

    Take.prototype["do"] = function() {
      var entity, location, _ref, _results;
      _ref = this.entity.map;
      _results = [];
      for (location in _ref) {
        entity = _ref[location];
        if (entity.id !== this.entity.id) {
          _results.push(entity.emit("take", {
            what: this.what,
            "with": this["with"],
            who: this
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Take.prototype.reactions = {
      "take": function(_arg) {
        var howMuch, what, who;
        what = _arg.what, howMuch = _arg.howMuch, who = _arg.who;
        if (this.entity[what] && this.entity[what] > 0) {
          if (this.entity[what] <= howMuch) {
            howMuch = this[what];
          }
          this.entity[what] -= howMuch;
          return who.emit("give", {
            what: what,
            howMuch: howMuch,
            who: this
          });
        }
      }
    };

    return Take;

  })(Action);

  module.exports = {
    Take: Take,
    Action: Action,
    Give: Give
  };

}).call(this);
